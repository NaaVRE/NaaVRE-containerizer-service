{
  "confs": [
    {
      "name": "conf_string",
      "assignation": "conf_string = 'param_string value'"
    },
    {
      "name": "conf_string_with_comment",
      "assignation": "conf_string_with_comment = 'param_string value'"
    },
    {
      "name": "conf_int",
      "assignation": "conf_int = 1"
    },
    {
      "name": "conf_float",
      "assignation": "conf_float = 1.1"
    },
    {
      "name": "conf_list_int",
      "assignation": "conf_list_int = list(1, 2, 3)"
    },
    {
      "name": "conf_list_str",
      "assignation": "conf_list_str = list('list_str', 'space in elem', '3')"
    }
  ],
  "dependencies": [],
  "inputs": [
    {
      "name": "var_string",
      "type": "str"
    },
    {
      "name": "var_string_with_comment",
      "type": "str"
    },
    {
      "name": "var_int",
      "type": "int"
    },
    {
      "name": "var_float",
      "type": "float"
    },
    {
      "name": "var_list_int",
      "type": "list"
    },
    {
      "name": "var_list_str",
      "type": "list"
    }
  ],
  "kernel": "IRkernel",
  "outputs": [],
  "params": [
    {
      "default_value": 1.1,
      "name": "param_float",
      "type": "float"
    },
    {
      "default_value": 1,
      "name": "param_int",
      "type": "int"
    },
    {
      "default_value": "[1, 2, 3]",
      "name": "param_list_int",
      "type": "list"
    },
    {
      "default_value": "['list_str', 'space in elem', '3']",
      "name": "param_list_str",
      "type": "list"
    },
    {
      "default_value": "param_string value",
      "name": "param_string",
      "type": "str"
    },
    {
      "default_value": "param_string value",
      "name": "param_string_with_comment",
      "type": "str"
    }
  ],
  "secrets": [],
  "title": "r-check-var-types-test-user-2",
  "base_container_image": {
    "build": "ghcr.io/qcdis/naavre/naavre-cell-build-r:latest",
    "runtime": "ghcr.io/qcdis/naavre/naavre-cell-runtime-r:latest"
  },
  "original_source": "print(paste('conf_string: ', conf_string, ' type: ', class(conf_string)))\nprint(paste('conf_string_with_comment: ', conf_string_with_comment, ' type: ', class(conf_string_with_comment)))\nprint(paste('conf_int: ', conf_int, ' type: ', class(conf_int)))\nprint(paste('conf_float: ', conf_float, ' type: ', class(conf_float)))\nprint(paste('conf_list_int: ', toString(conf_list_int), ' type: ', class(conf_list_int)))\nprint(paste('conf_list_str: ', toString(conf_list_str), ' type: ', class(conf_list_str)))\n\nprint(paste('param_string: ', param_string, ' type: ', class(param_string)))\nprint(paste('param_string_with_comment: ', param_string_with_comment, ' type: ', class(param_string_with_comment)))\nprint(paste('param_int: ', param_int, ' type: ', class(param_int)))\nprint(paste('param_float: ', param_float, ' type: ', class(param_float)))\nprint(paste('param_list_int: ', toString(param_list_int), ' type: ', class(param_list_int)))\nprint(paste('param_list_str: ', toString(param_list_str), ' type: ', class(param_list_str)))\n\nprint(paste('var_string: ', var_string, ' type: ', class(var_string)))\nprint(paste('var_string_with_comment: ', var_string_with_comment, ' type: ', class(var_string_with_comment)))\nprint(paste('var_int: ', var_int, ' type: ', class(var_int)))\nprint(paste('var_float: ', var_float, ' type: ', class(var_float)))\nprint(paste('var_list_int: ', toString(var_list_int), ' type: ', class(var_list_int)))\nprint(paste('var_list_str: ', toString(var_list_str), ' type: ', class(var_list_str)))\n\ncheck_type <- function(var, expected_types) {\n  \n  if (!any(sapply(expected_types, function(x) inherits(var, x)))) {\n    stop(paste('Variable is not of the expected types:', paste(expected_types, collapse = ', '),\n               '. It is a', class(var)))\n  }\n  \n  if ('list' %in% expected_types) {\n    if (!is.list(var) && !is.vector(var)) {\n      stop(paste('Variable', var, 'is not iterable.'))\n    }\n  }\n}\n\ncheck_type(conf_string, c(c(\"character\")))\ncheck_type(conf_string_with_comment, c(\"character\"))\ncheck_type(conf_int, \"numeric\")\ncheck_type(conf_float, \"numeric\")\nif (is.numeric(conf_list_int)) {\n  conf_list_int <- list(conf_list_int)\n}\n\ncheck_type(conf_list_int, c(\"list\"))\nif (is.character(conf_list_str)) {\n  conf_list_str <- list(conf_list_str)\n}\ncheck_type(conf_list_str, c(\"list\"))\n\ncheck_type(param_string, c(\"character\"))\ncheck_type(param_string_with_comment, c(\"character\"))\ncheck_type(param_int, c(\"numeric\", \"integer\"))\ncheck_type(param_float, c(\"numeric\", \"float\"))\nif (is.numeric(param_list_int)) {\n  param_list_int <- list(param_list_int)\n}\ncheck_type(param_list_int, c(\"list\"))\ncheck_type(conf_list_int, c(\"list\"))\nif (is.character(param_list_str)) {\n  param_list_str <- list(param_list_str)\n}\ncheck_type(param_list_str, c(\"list\"))\n\ncheck_type(var_string, c(\"character\"))\ncheck_type(var_string_with_comment, c(\"character\"))\ncheck_type(var_int, c(\"numeric\", \"integer\"))\ncheck_type(var_float, c(\"numeric\", \"float\"))\nif (is.numeric(var_list_int)) {\n  var_list_int <- list(var_list_int)\n}\ncheck_type(var_list_int, c(\"list\"))\n\nif (is.character(var_list_str)) {\n  var_list_str <- list(var_list_str)\n}\ncheck_type(var_list_str, c(\"list\"))\n\nprint('All vars are of the correct type')\n\ndone <- TRUE"
}
