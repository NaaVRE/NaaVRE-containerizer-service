{
  "data": {
    "save": false,
    "kernel": "ipython",
    "cell_index": 1,
    "notebook": {
      "metadata": {
        "kernelspec": {
          "display_name": "Python 3 (ipykernel)",
          "language": "python",
          "name": "python3"
        },
        "language_info": {
          "name": "python",
          "version": "3.11.9",
          "mimetype": "text/x-python",
          "codemirror_mode": {
            "name": "ipython",
            "version": 3
          },
          "pygments_lexer": "ipython3",
          "nbconvert_exporter": "python",
          "file_extension": ".py"
        }
      },
      "nbformat_minor": 5,
      "nbformat": 4,
      "cells": [
        {
          "cell_type": "code",
          "source": "# vars types\nparam_string = 'param_string value'\nparam_string_with_comment = 'param_string value'  # comment\nparam_int = 1\nparam_float = 1.1\nparam_list_int = [1, 2, 3]\nparam_list_str = [\"list_str\", \"space in elem\", \"3\"]\n\nconf_string = 'param_string value'\nconf_string_with_comment = 'param_string value'  # comment\nconf_int = 1\nconf_float = 1.1\nconf_list_int = [1, 2, 3]\nconf_list_str = [\"list_str\", \"space in elem\", \"3\"]\n\nvar_string = 'var_string value'\nvar_string_with_comment = 'var_string value'  # comment\nvar_int = 1\nvar_float = 1.1\nvar_list_int = [1, 2, 3]\nvar_list_str = [\"list_str\", \"space in elem\", \"3\"]\n",
          "metadata": {},
          "execution_count": 4,
          "outputs": [],
          "id": "0afee7dc-9cf1-4b8a-b148-6e4bf54724a5"
        },
        {
          "cell_type": "code",
          "source": "# check var types\n\nprint('conf_string: ' + str(conf_string) + ' type: ' + str(type(conf_string)))\nprint('conf_string_with_comment: ' + str(conf_string_with_comment) + ' type: ' + str(type(conf_string_with_comment)))\nprint('conf_int: ' + str(conf_int) + ' type: ' + str(type(conf_int)))\nprint('conf_float: ' + str(conf_float) + ' type: ' + str(type(conf_float)))\nprint('conf_list_int: ' + str(conf_list_int) + ' type: ' + str(type(conf_list_int)))\nprint('conf_list_str: ' + str(conf_list_str) + ' type: ' + str(type(conf_list_str)))\n\nprint('param_string: ' + str(param_string) + ' type: ' + str(type(param_string)))\nprint('param_string_with_comment: ' + str(param_string_with_comment) + ' type: ' + str(type(param_string_with_comment)))\nprint('param_int: ' + str(param_int) + ' type: ' + str(type(param_int)))\nprint('param_float: ' + str(param_float) + ' type: ' + str(type(param_float)))\nprint('param_list_int: ' + str(param_list_int) + ' type: ' + str(type(param_list_int)))\nprint('param_list_str: ' + str(param_list_str) + ' type: ' + str(type(param_list_str)))\n\nprint('var_string: ' + str(var_string) + ' type: ' + str(type(var_string)))\nprint('var_string_with_comment: ' + str(var_string_with_comment) + ' type: ' + str(type(var_string_with_comment)))\nprint('var_int: ' + str(var_int) + ' type: ' + str(type(var_int)))\nprint('var_float: ' + str(var_float) + ' type: ' + str(type(var_float)))\nprint('var_list_int: ' + str(var_list_int) + ' type: ' + str(type(var_list_int)))\nprint('var_list_str: ' + str(var_list_str) + ' type: ' + str(type(var_list_str)))\n\ncheck = conf_string\nif not isinstance(check, str):\n    print('conf_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_string_with_comment\nif not isinstance(check, str):\n    print('conf_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_int\nif not isinstance(check, int):\n    print('conf_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_float\nif not isinstance(check, float):\n    print('conf_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_list_int\nif not isinstance(check, list):\n    print('conf_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in conf_list_int:\n    if not isinstance(i, int):\n        print('conf_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = conf_list_str\nif not isinstance(check, list):\n    print('conf_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in conf_list_str:\n    if not isinstance(i, str):\n        print('conf_list_str contains a non-str value: ' + str(i))\n        exit(1)\n\ncheck = param_string\nif not isinstance(check, str):\n    print('param_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_string_with_comment\nif not isinstance(check, str):\n    print('param_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_int\nif not isinstance(check, int):\n    print('param_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_float\nif not isinstance(check, float):\n    print('param_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_list_int\nif not isinstance(check, list):\n    print('param_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_int:\n    if not isinstance(i, int):\n        print('param_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = param_list_str\nif not isinstance(check, list):\n    print('param_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_str:\n    if not isinstance(i, str):\n        print('param_list_str contains a non-str value: ' + str(i))\n        exit(1)\n\n\ncheck = var_string\nif not isinstance(check, str):\n    print('var_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_string_with_comment\nif not isinstance(check, str):\n    print('var_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_int\nif not isinstance(check, int):\n    print('var_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_float\nif not isinstance(check, float):\n    print('var_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_list_int\nif not isinstance(check, list):\n    print('var_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in var_list_int:\n    if not isinstance(i, int):\n        print('var_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = var_list_str\nif not isinstance(check, list):\n    print('var_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in var_list_str:\n    if not isinstance(i, str):\n        print('var_list_str contains a non-str value: ' + str(i))\n        exit(1)\nprint('All vars are of the correct type')\n\ndone = 'True'\n",
          "metadata": {},
          "execution_count": 5,
          "outputs": [
            {
              "name": "stdout",
              "output_type": "stream",
              "text": "conf_string: param_string value type: <class 'str'>\nconf_string_with_comment: param_string value type: <class 'str'>\nconf_int: 1 type: <class 'int'>\nconf_float: 1.1 type: <class 'float'>\nconf_list_int: [1, 2, 3] type: <class 'list'>\nconf_list_str: ['list_str', 'space in elem', '3'] type: <class 'list'>\nparam_string: param_string value type: <class 'str'>\nparam_string_with_comment: param_string value type: <class 'str'>\nparam_int: 1 type: <class 'int'>\nparam_float: 1.1 type: <class 'float'>\nparam_list_int: [1, 2, 3] type: <class 'list'>\nparam_list_str: ['list_str', 'space in elem', '3'] type: <class 'list'>\nvar_string: var_string value type: <class 'str'>\nvar_string_with_comment: var_string value type: <class 'str'>\nvar_int: 1 type: <class 'int'>\nvar_float: 1.1 type: <class 'float'>\nvar_list_int: [1, 2, 3] type: <class 'list'>\nvar_list_str: ['list_str', 'space in elem', '3'] type: <class 'list'>\nAll vars are of the correct type\n"
            }
          ],
          "id": "52d263a1-df6d-4bf3-a97a-32a862c541ab"
        },
        {
          "cell_type": "code",
          "source": "# Assert vars \nprint(done)\n\ncheck_string = 'param_string value'\ncheck_string_with_comment = 'param_string value'  # comment\ncheck_int = 1\ncheck_float = 1.1\ncheck_list_int = [1, 2, 3]\ncheck_list_str = [\"list_str\", \"space in elem\", \"3\"]\n\nassert conf_string == check_string\nassert conf_string_with_comment == check_string_with_comment\nassert conf_int == check_int\nassert conf_float == check_float\nassert conf_list_int == check_list_int\nassert conf_list_str == check_list_str\n\n\nassert param_string == check_string\nassert param_string_with_comment == check_string_with_comment\nassert param_int == check_int\nassert param_float == check_float\nassert param_list_int == check_list_int\nassert param_list_str == check_list_str\n\nprint(\"All variables are the same.\")",
          "metadata": {},
          "execution_count": 6,
          "outputs": [
            {
              "name": "stdout",
              "output_type": "stream",
              "text": "True\nAll variables are the same.\n"
            }
          ],
          "id": "4714702e-978b-4b4c-bd6c-d3e720bad65c"
        },
        {
          "cell_type": "code",
          "source": "",
          "metadata": {},
          "execution_count": null,
          "outputs": [],
          "id": "17964f67-f63c-46df-b2aa-04033008f974"
        }
      ]
    }
  },
  "cell": {
    "chart_obj": {
      "hovered": {},
      "links": {},
      "nodes": {
        "dc048f7": {
          "id": "dc048f7",
          "ports": {
            "done": {
              "id": "done",
              "properties": {
                "color": "#ac8a53"
              },
              "type": "right"
            },
            "var_float": {
              "id": "var_float",
              "properties": {
                "color": "#53ac8b"
              },
              "type": "left"
            },
            "var_int": {
              "id": "var_int",
              "properties": {
                "color": "#aad279"
              },
              "type": "left"
            },
            "var_list_int": {
              "id": "var_list_int",
              "properties": {
                "color": "#2d4ed2"
              },
              "type": "left"
            },
            "var_list_str": {
              "id": "var_list_str",
              "properties": {
                "color": "#6c89e0"
              },
              "type": "left"
            },
            "var_string": {
              "id": "var_string",
              "properties": {
                "color": "#98e06c"
              },
              "type": "left"
            },
            "var_string_with_comment": {
              "id": "var_string_with_comment",
              "properties": {
                "color": "#87c0c5"
              },
              "type": "left"
            }
          },
          "position": {
            "x": 35,
            "y": 15
          },
          "properties": {
            "inputs": [
              "var_string_with_comment",
              "var_int",
              "var_list_int",
              "var_string",
              "var_float",
              "var_list_str"
            ],
            "og_node_id": "dc048f7",
            "outputs": [
              "done"
            ],
            "params": [
              "param_string",
              "param_string_with_comment",
              "param_int",
              "param_float",
              "param_list_int",
              "param_list_str"
            ],
            "secrets": [],
            "title": "check-var-types-test-user-2",
            "vars": [
              {
                "color": "#87c0c5",
                "direction": "input",
                "name": "var_string_with_comment",
                "type": "datatype"
              },
              {
                "color": "#aad279",
                "direction": "input",
                "name": "var_int",
                "type": "datatype"
              },
              {
                "color": "#2d4ed2",
                "direction": "input",
                "name": "var_list_int",
                "type": "datatype"
              },
              {
                "color": "#98e06c",
                "direction": "input",
                "name": "var_string",
                "type": "datatype"
              },
              {
                "color": "#53ac8b",
                "direction": "input",
                "name": "var_float",
                "type": "datatype"
              },
              {
                "color": "#6c89e0",
                "direction": "input",
                "name": "var_list_str",
                "type": "datatype"
              },
              {
                "color": "#ac8a53",
                "direction": "output",
                "name": "done",
                "type": "datatype"
              }
            ]
          },
          "type": "input-output"
        }
      },
      "offset": {
        "x": 0,
        "y": 0
      },
      "scale": 1,
      "selected": {}
    },
    "confs": [
      {
        "name": "conf_string",
        "assignation": "conf_string = 'param_string value'"
      },
      {
        "name": "conf_string_with_comment",
        "assignation": "conf_string_with_comment = 'param_string value'"
      },
      {
        "name": "conf_int",
        "assignation": "conf_int = 1"
      },
      {
        "name": "conf_float",
        "assignation": "conf_float = 1.1"
      },
      {
        "name": "conf_list_int",
        "assignation": "conf_list_int = [1, 2, 3]"
      },
      {
        "name": "conf_list_str",
        "assignation": "conf_list_str = ['list_str', 'space in elem', '3']"
      }
    ],
    "dependencies": [],
    "inputs": [
      {
        "name": "var_string",
        "type": "str"
      },
      {
        "name": "var_string_with_comment",
        "type": "str"
      },
      {
        "name": "var_int",
        "type": "int"
      },
      {
        "name": "var_float",
        "type": "float"
      },
      {
        "name": "var_list_int",
        "type": "list"
      },
      {
        "name": "var_list_str",
        "type": "list"
      }
    ],
    "kernel": "ipython",
    "outputs": [
      {
        "name": "done",
        "type": "str"
      }
    ],
    "params": [
      {
        "name": "param_string",
        "type": "str",
        "default_value": "param_string value"
      },
      {
        "name": "param_string_with_comment",
        "type": "str",
        "default_value": "param_string value"
      },
      {
        "name": "param_int",
        "type": "int",
        "default_value": 1
      },
      {
        "name": "param_float",
        "type": "float",
        "default_value": 1.1
      },
      {
        "name": "param_list_int",
        "type": "list",
        "default_value": [
          1,
          2,
          3
        ]
      },
      {
        "name": "param_list_str",
        "type": "list",
        "default_value": [
          "list_str",
          "space in elem",
          "3"
        ]
      }
    ],
    "secrets": [],
    "original_source": "print('conf_string: ' + str(conf_string) + ' type: ' + str(type(conf_string)))\nprint('conf_string_with_comment: ' + str(conf_string_with_comment) + ' type: ' + str(type(conf_string_with_comment)))\nprint('conf_int: ' + str(conf_int) + ' type: ' + str(type(conf_int)))\nprint('conf_float: ' + str(conf_float) + ' type: ' + str(type(conf_float)))\nprint('conf_list_int: ' + str(conf_list_int) + ' type: ' + str(type(conf_list_int)))\nprint('conf_list_str: ' + str(conf_list_str) + ' type: ' + str(type(conf_list_str)))\n\nprint('param_string: ' + str(param_string) + ' type: ' + str(type(param_string)))\nprint('param_string_with_comment: ' + str(param_string_with_comment) + ' type: ' + str(type(param_string_with_comment)))\nprint('param_int: ' + str(param_int) + ' type: ' + str(type(param_int)))\nprint('param_float: ' + str(param_float) + ' type: ' + str(type(param_float)))\nprint('param_list_int: ' + str(param_list_int) + ' type: ' + str(type(param_list_int)))\nprint('param_list_str: ' + str(param_list_str) + ' type: ' + str(type(param_list_str)))\n\nprint('var_string: ' + str(var_string) + ' type: ' + str(type(var_string)))\nprint('var_string_with_comment: ' + str(var_string_with_comment) + ' type: ' + str(type(var_string_with_comment)))\nprint('var_int: ' + str(var_int) + ' type: ' + str(type(var_int)))\nprint('var_float: ' + str(var_float) + ' type: ' + str(type(var_float)))\nprint('var_list_int: ' + str(var_list_int) + ' type: ' + str(type(var_list_int)))\nprint('var_list_str: ' + str(var_list_str) + ' type: ' + str(type(var_list_str)))\n\ncheck = conf_string\nif not isinstance(check, str):\n    print('conf_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_string_with_comment\nif not isinstance(check, str):\n    print('conf_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_int\nif not isinstance(check, int):\n    print('conf_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_float\nif not isinstance(check, float):\n    print('conf_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_list_int\nif not isinstance(check, list):\n    print('conf_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in conf_list_int:\n    if not isinstance(i, int):\n        print('conf_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = conf_list_str\nif not isinstance(check, list):\n    print('conf_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in conf_list_str:\n    if not isinstance(i, str):\n        print('conf_list_str contains a non-str value: ' + str(i))\n        exit(1)\n\ncheck = param_string\nif not isinstance(check, str):\n    print('param_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_string_with_comment\nif not isinstance(check, str):\n    print('param_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_int\nif not isinstance(check, int):\n    print('param_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_float\nif not isinstance(check, float):\n    print('param_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_list_int\nif not isinstance(check, list):\n    print('param_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_int:\n    if not isinstance(i, int):\n        print('param_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = param_list_str\nif not isinstance(check, list):\n    print('param_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_str:\n    if not isinstance(i, str):\n        print('param_list_str contains a non-str value: ' + str(i))\n        exit(1)\n\n\ncheck = var_string\nif not isinstance(check, str):\n    print('var_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_string_with_comment\nif not isinstance(check, str):\n    print('var_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_int\nif not isinstance(check, int):\n    print('var_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_float\nif not isinstance(check, float):\n    print('var_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_list_int\nif not isinstance(check, list):\n    print('var_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in var_list_int:\n    if not isinstance(i, int):\n        print('var_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = var_list_str\nif not isinstance(check, list):\n    print('var_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in var_list_str:\n    if not isinstance(i, str):\n        print('var_list_str contains a non-str value: ' + str(i))\n        exit(1)\nprint('All vars are of the correct type')\n\ndone = 'True'",
    "title": "check-var-types-test-user-2",
    "base_container_image": {
      "build": "ghcr.io/qcdis/naavre/naavre-cell-build-python:v0.20",
      "runtime": "ghcr.io/qcdis/naavre/naavre-cell-runtime-python:v0.20"
    }
  }
}