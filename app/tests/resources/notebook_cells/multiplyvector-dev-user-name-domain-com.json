{
  "data": {
    "save": false,
    "kernel": "IRkernel",
    "cell_index": 1,
    "notebook": {
      "metadata": {
        "kernelspec": {
          "display_name": "R [conda env:jupyterlab] *",
          "language": "R",
          "name": "conda-env-jupyterlab-r"
        },
        "language_info": {
          "codemirror_mode": "r",
          "file_extension": ".r",
          "mimetype": "text/x-r-source",
          "name": "R",
          "pygments_lexer": "r",
          "version": "4.3.3"
        }
      },
      "nbformat_minor": 5,
      "nbformat": 4,
      "cells": [
        {
          "cell_type": "code",
          "source": "",
          "metadata": {
            "trusted": true
          },
          "execution_count": null,
          "outputs": [],
          "id": "787240ec-09c5-473e-bee7-299247c59b9b"
        },
        {
          "cell_type": "code",
          "source": "# multiplyvector\n# ----- Libraries needed for auto-generated code ----- #\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(readr)\n# ----- End of libraries ----- #\n\nv1 <- 1:500000\nv2 <- 500000:1\n\nprint(\"Created vectors\")\nstart_run_time <- Sys.time()\n\nlibrary(Rcpp)\n\n# sourceCpp(\"multiply_vector.cpp\")\n\nstart_func_time <- Sys.time()\n# result <- multiply_vectors(v1, v2)\n# ----- THIS CODE IS AUTO-GENERATED BY MULTICONTAINERIZER ----- #\n{# Convert each param to JSON format\njson_v1 <- toJSON(as.vector(v1))\njson_v2 <- toJSON(as.vector(v2))\n\n# Prepare a list for JSON conversion\nlist_result <- list(\n\tv1 = json_v1,\n\tv2 = json_v2\n)\n# Convert to JSON format\njson_result <- toJSON(list_result, auto_unbox=TRUE)\n# URL dependent on configuration\nurl_result <- \"http://localhost:8080/multiply_vectors\"\n\n# Call the correct API endpoint for this function and process the result\nresponse_result <- POST(\n\turl_result,\n\tbody = json_result,\n\tencode = \"raw\",\n\tadd_headers(\"Content-Type\" = \"application/json\")\n)\n\ncontent_result <- content(response_result)\n\n# Capture the results in the original variable, and convert into correct format\nresult <- as.vector(content_result)\nresult <- as.vector(as.numeric(result))\n}# ---- END OF AUTO-GENERATED CODE ----- #\nend_func_time <- Sys.time()\n\nend_run_time <- Sys.time()\n\nrun_time <- as.numeric(end_run_time - start_run_time, units = \"secs\")\nfunc_time <- as.numeric(end_func_time - start_func_time, units = \"secs\")\n\nprint(paste(\"Run time: \", run_time))\nprint(paste(\"Func time: \", func_time))\n",
          "metadata": {
            "trusted": true
          },
          "execution_count": 1,
          "outputs": [
            {
              "output_type": "display_data",
              "data": {
                "text/plain": "Error in eval(expr, envir, enclos): object 'run_time' not found\n"
              },
              "metadata": {}
            }
          ],
          "id": "35cfa672-d4fe-47c9-909b-ca7d13b38aed"
        },
        {
          "cell_type": "code",
          "source": "print(paste(\"Run time: \", run_time))",
          "metadata": {
            "trusted": true
          },
          "execution_count": null,
          "outputs": [],
          "id": "59994881-ea2a-4f7b-9101-6c4c1deb51e6"
        },
        {
          "cell_type": "code",
          "source": "",
          "metadata": {
            "trusted": true
          },
          "execution_count": null,
          "outputs": [],
          "id": "3ea928b0-a32f-4eab-962d-59eab6de3b09"
        }
      ]
    }
  },
  "cell": {
    "chart_obj": {
      "hovered": {},
      "links": {},
      "nodes": {
        "747b6f2": {
          "id": "747b6f2",
          "ports": {
            "run_time": {
              "id": "run_time",
              "properties": {
                "color": "#3a783d"
              },
              "type": "right"
            }
          },
          "position": {
            "x": 35,
            "y": 15
          },
          "properties": {
            "inputs": [],
            "og_node_id": "747b6f2",
            "outputs": [
              "run_time"
            ],
            "params": [],
            "secrets": [],
            "title": "multiplyvector-test-user-2",
            "vars": [
              {
                "color": "#3a783d",
                "direction": "output",
                "name": "run_time",
                "type": "datatype"
              }
            ]
          },
          "type": "input-output"
        }
      },
      "offset": {
        "x": 0,
        "y": 0
      },
      "scale": 1,
      "selected": {}
    },
    "confs": [],
    "dependencies": [
      {
        "asname": "",
        "module": "",
        "name": "Rcpp"
      },
      {
        "asname": "",
        "module": "",
        "name": "httr"
      },
      {
        "asname": "",
        "module": "",
        "name": "jsonlite"
      },
      {
        "asname": "",
        "module": "",
        "name": "readr"
      }
    ],
    "inputs": [],
    "kernel": "IRkernel",
    "node_id": "747b6f2",
    "original_source": "# multiplyvector\n# ----- Libraries needed for auto-generated code ----- #\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(readr)\n# ----- End of libraries ----- #\n\nv1 <- 1:500000\nv2 <- 500000:1\n\nprint(\"Created vectors\")\nstart_run_time <- Sys.time()\n\nlibrary(Rcpp)\n\n# sourceCpp(\"multiply_vector.cpp\")\n\nstart_func_time <- Sys.time()\n# result <- multiply_vectors(v1, v2)\n# ----- THIS CODE IS AUTO-GENERATED BY MULTICONTAINERIZER ----- #\n{# Convert each param to JSON format\njson_v1 <- toJSON(as.vector(v1))\njson_v2 <- toJSON(as.vector(v2))\n\n# Prepare a list for JSON conversion\nlist_result <- list(\n\tv1 = json_v1,\n\tv2 = json_v2\n)\n# Convert to JSON format\njson_result <- toJSON(list_result, auto_unbox=TRUE)\n# URL dependent on configuration\nurl_result <- \"http://localhost:8080/multiply_vectors\"\n\n# Call the correct API endpoint for this function and process the result\nresponse_result <- POST(\n\turl_result,\n\tbody = json_result,\n\tencode = \"raw\",\n\tadd_headers(\"Content-Type\" = \"application/json\")\n)\n\ncontent_result <- content(response_result)\n\n# Capture the results in the original variable, and convert into correct format\nresult <- as.vector(content_result)\nresult <- as.vector(as.numeric(result))\n}# ---- END OF AUTO-GENERATED CODE ----- #\nend_func_time <- Sys.time()\n\nend_run_time <- Sys.time()\n\nrun_time <- as.numeric(end_run_time - start_run_time, units = \"secs\")\nfunc_time <- as.numeric(end_func_time - start_func_time, units = \"secs\")\n\nprint(paste(\"Run time: \", run_time))\nprint(paste(\"Func time: \", func_time))",
    "outputs": [
      {
        "name": "run_time",
        "type": null
      }
    ],
    "params": [],
    "secrets": [],
    "title": "multiplyvector-test-user-2",
    "base_container_image": {
      "build": "ghcr.io/qcdis/naavre/naavre-cell-build-r:v0.21.1",
      "runtime": "ghcr.io/qcdis/naavre/naavre-cell-runtime-r:v0.21.1"
    }
  }
}