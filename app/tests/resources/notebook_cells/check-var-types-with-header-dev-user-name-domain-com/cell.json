{
  "confs": [
    {
      "name": "conf_string",
      "assignation": "conf_string = 'param_string value'"
    },
    {
      "name": "conf_string_with_comment",
      "assignation": "conf_string_with_comment = 'param_string value'"
    },
    {
      "name": "conf_int",
      "assignation": "conf_int = 1"
    },
    {
      "name": "conf_float",
      "assignation": "conf_float = 1.1"
    },
    {
      "name": "conf_list_int",
      "assignation": "conf_list_int = [1, 2, 3]"
    },
    {
      "name": "conf_list_str",
      "assignation": "conf_list_str = ['list_str', 'space in elem', '3']"
    }
  ],
  "dependencies": [],
  "inputs": [
    {
      "name": "var_string",
      "type": "str"
    },
    {
      "name": "var_string_with_comment",
      "type": "str"
    },
    {
      "name": "var_int",
      "type": "int"
    },
    {
      "name": "var_float",
      "type": "float"
    },
    {
      "name": "var_list_int",
      "type": "list"
    },
    {
      "name": "var_list_str",
      "type": "list"
    }
  ],
  "kernel": "ipython",
  "outputs": [
    {
      "name": "done",
      "type": "str"
    }
  ],
  "params": [
    {
      "name": "param_string",
      "type": "str",
      "default_value": "param_string value"
    },
    {
      "name": "param_string_with_comment",
      "type": "str",
      "default_value": "param_string value"
    },
    {
      "name": "param_int",
      "type": "int",
      "default_value": "1"
    },
    {
      "name": "param_float",
      "type": "float",
      "default_value": "1.1"
    },
    {
      "name": "param_list_int",
      "type": "list",
      "default_value": "[1, 2, 3]"
    },
    {
      "name": "param_list_str",
      "type": "list",
      "default_value": "[\"list_str\", \"space in elem\", \"3\"]"
    }
  ],
  "secrets": [],
  "title": "check-var-types-with-header-test-user-2",
  "original_source": "print('conf_string: ' + str(conf_string) + ' type: ' + str(type(conf_string)))\nprint('conf_string_with_comment: ' + str(conf_string_with_comment) + ' type: ' + str(type(conf_string_with_comment)))\nprint('conf_int: ' + str(conf_int) + ' type: ' + str(type(conf_int)))\nprint('conf_float: ' + str(conf_float) + ' type: ' + str(type(conf_float)))\nprint('conf_list_int: ' + str(conf_list_int) + ' type: ' + str(type(conf_list_int)))\nprint('conf_list_str: ' + str(conf_list_str) + ' type: ' + str(type(conf_list_str)))\n\nprint('param_string: ' + str(param_string) + ' type: ' + str(type(param_string)))\nprint('param_string_with_comment: ' + str(param_string_with_comment) + ' type: ' + str(type(param_string_with_comment)))\nprint('param_int: ' + str(param_int) + ' type: ' + str(type(param_int)))\nprint('param_float: ' + str(param_float) + ' type: ' + str(type(param_float)))\nprint('param_list_int: ' + str(param_list_int) + ' type: ' + str(type(param_list_int)))\nprint('param_list_str: ' + str(param_list_str) + ' type: ' + str(type(param_list_str)))\n\nprint('var_string: ' + str(var_string) + ' type: ' + str(type(var_string)))\nprint('var_string_with_comment: ' + str(var_string_with_comment) + ' type: ' + str(type(var_string_with_comment)))\nprint('var_int: ' + str(var_int) + ' type: ' + str(type(var_int)))\nprint('var_float: ' + str(var_float) + ' type: ' + str(type(var_float)))\nprint('var_list_int: ' + str(var_list_int) + ' type: ' + str(type(var_list_int)))\nprint('var_list_str: ' + str(var_list_str) + ' type: ' + str(type(var_list_str)))\n\ncheck = conf_string\nif not isinstance(check, str):\n    print('conf_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_string_with_comment\nif not isinstance(check, str):\n    print('conf_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_int\nif not isinstance(check, int):\n    print('conf_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_float\nif not isinstance(check, float):\n    print('conf_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = conf_list_int\nif not isinstance(check, list):\n    print('conf_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in conf_list_int:\n    if not isinstance(i, int):\n        print('conf_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = conf_list_str\nif not isinstance(check, list):\n    print('conf_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in conf_list_str:\n    if not isinstance(i, str):\n        print('conf_list_str contains a non-str value: ' + str(i))\n        exit(1)\n\ncheck = param_string\nif not isinstance(check, str):\n    print('param_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_string_with_comment\nif not isinstance(check, str):\n    print('param_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_int\nif not isinstance(check, int):\n    print('param_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_float\nif not isinstance(check, float):\n    print('param_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = param_list_int\nif not isinstance(check, list):\n    print('param_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_int:\n    if not isinstance(i, int):\n        print('param_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = param_list_str\nif not isinstance(check, list):\n    print('param_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in param_list_str:\n    if not isinstance(i, str):\n        print('param_list_str contains a non-str value: ' + str(i))\n        exit(1)\n\n\ncheck = var_string\nif not isinstance(check, str):\n    print('var_string is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_string_with_comment\nif not isinstance(check, str):\n    print('var_string_with_comment is not a string. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_int\nif not isinstance(check, int):\n    print('var_int is not an int. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_float\nif not isinstance(check, float):\n    print('var_float is not a float. It is a ' + str(type(check)))\n    exit(1)\ncheck = var_list_int\nif not isinstance(check, list):\n    print('var_list_int is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in var_list_int:\n    if not isinstance(i, int):\n        print('var_list_int contains a non-int value: ' + str(i))\n        exit(1)\ncheck = var_list_str\nif not isinstance(check, list):\n    print('var_list_str is not a list. It is a ' + str(type(check)))\n    exit(1)\nfor i in var_list_str:\n    if not isinstance(i, str):\n        print('var_list_str contains a non-str value: ' + str(i))\n        exit(1)\nprint('All vars are of the correct type')\n\ndone = 'True'",
  "base_container_image": {
    "build": "ghcr.io/qcdis/naavre/naavre-cell-build-python:latest",
    "runtime": "ghcr.io/qcdis/naavre/naavre-cell-runtime-python:latest"
  }
}
