setwd('/app')
library(optparse)
library(jsonlite)

{% for dep in deps %}
{{ dep }}
{% endfor %}


{%  for secret in cell.secrets|sort(attribute='name')  %}
{{ secret['name'] }} = Sys.getenv('{{ secret['name'] }}')
{% endfor %}

print('option_list')
option_list = list(

{% for in_var in cell.inputs|sort(attribute='name')  %}
{% if in_var['type'] == list or in_var['type'] == 'list' %}
{% set type = 'character' %}
{% elif in_var['type'] == str or in_var['type'] == 'str' %}
{% set type = 'character' %}
{% elif in_var['type'] == int or in_var['type'] == 'int' %}
{% set type = 'integer' %}
{% elif in_var['type'] == float or in_var['type'] == 'float' %}
{% set type = 'numeric' %}
{% elif in_var['type'] == bool or in_var['type'] == 'bool' %}
{% set type = 'logical' %}
{% else %}
{% set type = 'character' %}
{% endif %}
{% set option = 'make_option(c("--' +  in_var['name']+'"), action="store", default=NA, type="'+type+'", help="my description"),'   %}
{{ option }}
{% endfor %}
make_option(c("--id"), action="store", default=NA, type="character", help="task id")
)


opt = parse_args(OptionParser(option_list=option_list))

var_serialization <- function(var){
    if (is.null(var)){
        print("Variable is null")
        exit(1)
    }
    tryCatch(
        {
            var <- fromJSON(var)
            print("Variable deserialized")
            return(var)
        },
        error=function(e) {
            print("Error while deserializing the variable")
            print(var)
            var <- gsub("'", '"', var)
            var <- fromJSON(var)
            print("Variable deserialized")
            return(var)
        },
        warning=function(w) {
            print("Warning while deserializing the variable")
            var <- gsub("'", '"', var)
            var <- fromJSON(var)
            print("Variable deserialized")
            return(var)
        }
    )
}

{% for in_var in cell.inputs|sort(attribute='name')  %}
print("Retrieving {{ in_var['name'] }}")
var = opt${{ in_var['name'] }}
print(var)
var_len = length(var)
print(paste("Variable {{ in_var['name'] }} has length", var_len))

{% if in_var['type'] == list  or in_var['type'] == 'list' %}
print("------------------------Running var_serialization for {{ in_var['name'] }}-----------------------")
print(opt${{ in_var['name'] }})
{{ in_var['name'] }} = var_serialization(opt${{ in_var['name'] }})
print("---------------------------------------------------------------------------------")

{% elif in_var['type'] == str or  in_var['type'] == 'str' %}
{{ in_var['name'] }} <- gsub("\"", "", opt${{ in_var['name'] }})
{% else %}
{{ in_var['name'] }} = opt${{ in_var['name'] }}
{% endif %}
{% endfor %}
id <- gsub('"', '', opt$id)

{% for c in confs %}
{{ c }}
{% endfor %}

print("Running the cell")
{{ cell.original_source }}
{% if cell.outputs|length > 0 %}
# capturing outputs
{% for out in cell.outputs %}
print('Serialization of {{ out['name'] }}')
file <- file(paste0('/tmp/{{out['name']}}_', id, '.json'))
writeLines(toJSON({{out['name']}}, auto_unbox=TRUE), file)
close(file)
{% endfor %}
{% endif %}